// Grid Syntax
// ===========

// Set Grid
// --------
// Set a new grid using a shorthand
// - $grid      : <settings>
@mixin set-grid(
  $grid
) {
  $susy: map-merge($susy, parse-grid($grid)) !global;
}

// Alternative syntax
@mixin susy-set(
  $grid
) {
  @include set-grid($grid);
}

// Use Grid
// --------
// Use an arbitrary grid for a section of code
// - $grid      : <settings>
@mixin use-grid(
  $grid
) {
  $old: $susy;

  @include set-grid($grid);
  @content;

  $susy: $old !global;
}

// Parse Grid
// ----------
// Parse a shorthand grid, and return an ordered list of settings
// - [$grid]  : <settings>
@function parse-grid(
  $grid
) {
  $return: $grid;

  @if type-of($grid) != map {
    $return         : ();
    $columns-check  : false;

    @each $item in $grid {

      // maps
      @if type-of($item) == map {
        $return: map-merge($return, $item);

      // Keywords
      } @else if type-of($item) == string {
        @each $key, $value in $susy-keywords {
          @if index($value, $item) {
            $return: map-merge($return, ($key: $item));
          }
        }
      }

      // Container, Columns, or Gutters
      @else if type-of($item) == number {
        @if not unitless($item) {
          $return: map-merge($return, (container: $item));
        } @else if not $columns-check {
          $return: map-merge($return, (columns: $item));
          $columns-check: true;
        } @else {
          $return: map-merge($return, (gutters: $item));
        }
      }

      // Columns or Gutters
      @else if type-of($item) == list {
        @if unitless(nth($item,1)) {
          $return: map-merge($return, (columns: $item));
          $columns-check: true;
        } @else {
          $return: map-merge($return, (column-width: nth($item,1)));
          $return: map-merge($return, (gutters: nth($item,2) / nth($item,1)));
        }
      }
    }
  }

  @return $return;
}

// Get Setting
// -----------
// Return one setting from a grid
// - setting    : <keyword>
// - $grid      : <settings>
@function susy-get(
  $key,
  $grid: map-merge($susy-defaults, $susy)
) {
  $grid: parse-grid($grid);

  @return map-get($grid, $key) or map-get($susy, $key) or map-get($susy-defaults, $key);
}
